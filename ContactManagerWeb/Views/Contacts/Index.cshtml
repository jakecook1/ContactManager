@model Paginate<ContactManagerWeb.ViewModels.ContactViewModel>
@{
    ViewData["Title"] = "Contacts";
    var activeOnly = @ViewData["ShowActive"] != null ? @ViewData["ShowActive"] : 1;
    var canCreate = ViewBag.CanCreate != null ? ViewBag.CanCreate : false;
}

<div>
    <div class="d-flex flex-wrap align-items-center">
        <div class="flex-fill">
            <h1 class="display-4">@ViewData["Title"]</h1>
        </div>
        <div>
            <span data-toggle="tooltip" data-placement="bottom" title="@(canCreate == true ? "Create new contact" : "Max contacts created")">
                <a asp-action="Create" class="@(canCreate == true ? "btn btn-primary mr-1" : "btn btn-primary mr-1 disabled")">
                    <i class="fas fa-user-edit"></i> Create
                </a>
            </span>
            <a asp-action="Export" class="btn btn-primary mr-1" data-toggle="tooltip" data-placement="bottom" title="Export to CSV"><i class="fas fa-download"></i> Export</a>
            <a asp-action="Print" class="btn btn-primary" data-toggle="tooltip" data-placement="bottom" title="Print"><i class="fas fa-print"></i></a>
        </div>
    </div>

    <hr />

    @await Html.PartialAsync("../Shared/DisplayTemplates/_SearchDisplay", @ViewData["currentFilter"])
    
    <div class="container">
        @await Html.PartialAsync("../Shared/DisplayTemplates/_ContactsTable", @Model.Items)
    </div>

    @{
        var pageNavigation = new PageNavigation
        {
            Index = Model.Index,
            Pages = Model.Pages,
            HasPrevious = Model.HasPrevious,
            HasNext = Model.HasNext
        };
    }

    @await Html.PartialAsync("../Shared/DisplayTemplates/_PageNavigationDisplay", pageNavigation)
</div>

@section Scripts {
    <script src="~/js/addModal.js"></script>
}